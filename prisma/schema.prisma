generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model groups {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  level       String
  description String
  members     User[]
  trainings   Training[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groupId       String?    @db.ObjectId
  group         groups?    @relation(fields: [groupId], references: [id])
  surveys       Survey[]
  activities    Activity[]
  createdAt     DateTime   @default(now())
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Training {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  duration    Int
  groupId     String?    @db.ObjectId
  group       groups?    @relation(fields: [groupId], references: [id])
  exercises   Json[]
  surveys     Survey[]
  createdAt   DateTime   @default(now())
  activities  Activity[]
}

model Survey {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  questions  Json[]
  userId     String?   @db.ObjectId
  user       User?     @relation(fields: [userId], references: [id])
  trainingID String?   @db.ObjectId
  trainings  Training? @relation(fields: [trainingID], references: [id])
  createdAt  DateTime  @default(now())
}

model Activity {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  trainingId    String?   @db.ObjectId
  training      Training? @relation(fields: [trainingId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comment       String?
  time          Int?
  burntCalories Int?
  dismissed     Boolean   @default(false)
}
